class Node {
    # Shaken, not stirred.
    [float]$X
    [float]$Y
    [float]$Z
    
    [float]$Radius
    [string]$Color # TODO: Validate input...
    
    # Node Constructor
    Node ([float]$x, [float]$y, [float]$z, [string]$color) {
        $this.X = $x
        $this.Y = $y
        $this.Z = $z

        $this.Radius = 20
        
        $this.Color = $color # TODO: Change from string, or sanitize?
    }
}

class Window {
    [System.Windows.Forms.Form]$Form
    [NodeInterface]$NodeInterface
    
    # Table to store all custom brushes, pens; indexed by [string]
    [hashtable]$PaintTools
    
    Window ([string]$title, [int]$x, [int]$y) {
        # Initialize Pen Container
        $this.PaintTools = @{}
        
        # Add the default pens
        $this.AddPen("Green", 255, 0, 160, 80)
        $this.AddPen("Blue", 255, 0, 114, 188)
        $this.AddPen("Yellow", 255, 255, 205, 0)
        $this.AddPen("Gray", 255, 127, 127, 127)

        Write-Host "PaintTools Init:" $this.PaintTools
        

        $this.Form = New-Object System.Windows.Forms.Form
        $this.Form.Text = $title
        $this.Form.Size = New-Object System.Drawing.Size($x, $y)
        
        # This example script is hardcoded to show only the PictureBox element in the window
        # Note: '$script:Nodes' should be changed to dynamically load more than 1 interface...

        $this.NodeInterface = [NodeInterface]::new($script:Nodes, $x, $y)
        
        # Add the Node Interface to the Form
        $this.Form.Controls.Add($this.NodeInterface.PictureBox)
    }
    
    [void] Show () {
        $this.NodeInterface.Update()
        $this.Form.ShowDialog()
    }
    
    [void] AddPen ([string]$colorName, [int]$alpha, [int]$red, [int]$green, [int]$blue) {
        # Calculate Inverse Color, for high contrast visibility..
        $ComplimentColor = [System.Drawing.Color]::FromArgb(255, 255 - $red, 255 - $green, 255 - $blue)

        $penObj = @{ 
            # Add variations of the original color to the collection..
            # Standard Color
            Active = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, $red, $green, $blue))
            ActiveFilled = [System.Drawing.SolidBrush]::new([System.Drawing.Color]::FromArgb(255, $red, $green, $blue))
            
            # Transparency
            GhostOutline = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(142, $red, $green, $blue))
            Ghost = [System.Drawing.SolidBrush]::new([System.Drawing.Color]::FromArgb(142, $red, $green, $blue))
            
            # Color Inversion
            Compliment = [System.Drawing.Pen]::new($ComplimentColor)
            ComplimentFilled = [System.Drawing.SolidBrush]::new($ComplimentColor)
            
            # Brightness Control 
            # TODO: ADD HSL RGB CONVERSION EQUATION... (also check incoming color brightness for finer grain control)
            # BrightFill = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, 0, 160, 80))
            # BrighterFill = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, 0, 160, 80))
            # BrightestFill = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, 0, 160, 80))
            
            # # More Brightness Control..
            # DarkFill = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, 0, 160, 80))
            # DarkerFill = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, 0, 160, 80))
            # DarkestFill = [System.Drawing.Pen]::new([System.Drawing.Color]::FromArgb(255, 0, 160, 80))
        }
        Write-Host $penObj
        
        $this.PaintTools[$colorName] = $penObj
    }
}

class NodeInterface { # Handles PictureBox element inside of Form
    [System.Windows.Forms.PictureBox]$PictureBox # Main Body of the Node Interface
    
    [System.Drawing.Bitmap]$Bitmap # Main Graphics Object
    [System.Drawing.Graphics]$GDI # Advanced Graphics Interface
    
    # All Nodes
    [System.Collections.ArrayList]$InterfaceNodes
    
    # Selected Nodes
    [System.Collections.ArrayList]$SelectedNodes
    
    # NodeInterface Constructor
    NodeInterface ($nodes, $windowWidth, $windowHeight) {
        Write-Host "Construct(NodeInterface)"
        $this.InterfaceNodes = $nodes
        
        # Initialize main PictureBox to store the image of the whole module 
        # NOTE: These values may need to be changed in order to add more controls...
        $this.PictureBox = New-Object System.Windows.Forms.PictureBox
        $this.PictureBox.Dock = [System.Windows.Forms.DockStyle]::Fill
        $this.PictureBox.SizeMode = [System.Windows.Forms.PictureBoxSizeMode]::AutoSize
        
        # Initialize NodeInterface with default values
        $this.Bitmap =  New-Object System.Drawing.Bitmap $windowWidth, $windowHeight
        $this.GDI = [System.Drawing.Graphics]::FromImage($this.Bitmap)
        $this.GDI.Clear([System.Drawing.Color]::Pink)
        
    }
    # Handle for No nodes being passed into NodeInterface...
    NodeInterface () {
        # TODO: Add logic for loading nodes dynamically if needed...
        Write-Host "No nodes provided!!"
    }
    
    [void] Update () {
        # $this.DrawConnections()
        $this.DrawNodes()
        # $this.DrawMeta()
        # $this.DrawCursor()
        # $this.DrawPanels()
    }
    
    # [void] DrawPanel () {}
    
    [void] DrawNodes () {
        foreach ($node in $this.InterfaceNodes) {
            # Crude node handling...
            # Use global handle to UI to grab relevant pen
            $brush = $script:Window.PaintTools[$node.Color]["ActiveFilled"] # TODO: Add Style
            Write-Host "Brush($brush)"
            $this.GDI.FillEllipse($brush, $node.X - $node.Radius, $node.Y - $node.Radius, 2 * $node.Radius, 2 * $node.Radius)
        }
        # Update PictureBox image with manipulated Bitmap..
        $this.PictureBox.Image = $this.Bitmap
        $this.PictureBox.Refresh()
    }
}

# Initialize Nodes..
$script:Nodes = New-Object System.Collections.ArrayList

$script:Nodes.Add([Node]::new(100, 100, 100, "Green"))
$script:Nodes.Add([Node]::new(200, 200, 200, "Blue"))
$script:Nodes.Add([Node]::new(300, 300, 300, "Yellow"))

$script:Window = [Window]::new("Nodes V3", 800, 600)

$script:Window.Show()
